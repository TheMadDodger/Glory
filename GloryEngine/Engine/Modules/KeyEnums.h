#pragma once
#include <Reflection.h>

namespace Glory
{
	enum KeyboardKey
	{
		KeyEscape,
		KeyF1,
		KeyF2,
		KeyF3,
		KeyF4,
		KeyF5,
		KeyF6,
		KeyF7,
		KeyF8,
		KeyF9,
		KeyF10,
		KeyF11,
		KeyF12,
		KeyF13,
		KeyF14,
		KeyF15,
		KeyF16,
		KeyF17,
		KeyF18,
		KeyF19,
		KeyPrint,
		KeyScrollLock,
		KeyBreak,

		KeySpace,

		KeyApostrophe,
		KeyComma,
		KeyMinus,
		KeyPeriod,
		KeySlash,

		Key0,
		Key1,
		Key2,
		Key3,
		Key4,
		Key5,
		Key6,
		Key7,
		Key8,
		Key9,

		KeySemicolon,
		KeyLess,
		KeyEqual,

		KeyA,
		KeyB,
		KeyC,
		KeyD,
		KeyE,
		KeyF,
		KeyG,
		KeyH,
		KeyI,
		KeyJ,
		KeyK,
		KeyL,
		KeyM,
		KeyN,
		KeyO,
		KeyP,
		KeyQ,
		KeyR,
		KeyS,
		KeyT,
		KeyU,
		KeyV,
		KeyW,
		KeyX,
		KeyY,
		KeyZ,

		KeyBracketLeft,
		KeyBackslash,
		KeyBracketRight,

		KeyGrave,

		KeyLeft,
		KeyRight,
		KeyUp,
		KeyDown,
		KeyInsert,
		KeyHome,
		KeyDelete,
		KeyEnd,
		KeyPageUp,
		KeyPageDown,

		KeyNumLock,
		KeyKpEqual,
		KeyKpDivide,
		KeyKpMultiply,
		KeyKpSubtract,
		KeyKpAdd,
		KeyKpEnter,
		KeyKpInsert,
		KeyKpEnd,
		KeyKpDown,
		KeyKpPageDown,
		KeyKpLeft,
		KeyKpBegin,
		KeyKpRight,
		KeyKpHome,
		KeyKpUp,
		KeyKpPageUp,
		KeyKpDelete,

		KeyBackSpace,
		KeyTab,
		KeyReturn,
		KeyCapsLock,
		KeyShiftL,
		KeyCtrlL,
		KeySuperL,
		KeyAltL,
		KeyAltR,
		KeySuperR,
		KeyMenu,
		KeyCtrlR,
		KeyShiftR,

		KeyBack,
		KeySoftLeft,
		KeySoftRight,
		KeyCall,
		KeyEndcall,
		KeyStar,
		KeyPound,
		KeyDpadCenter,
		KeyVolumeUp,
		KeyVolumeDown,
		KeyPower,
		KeyCamera,
		KeyClear,
		KeySymbol,
		KeyExplorer,
		KeyEnvelope,
		KeyEquals,
		KeyAt,
		KeyHeadsethook,
		KeyFocus,
		KeyPlus,
		KeyNotification,
		KeySearch,
		KeyMediaPlayPause,
		KeyMediaStop,
		KeyMediaNext,
		KeyMediaPrevious,
		KeyMediaRewind,
		KeyMediaFastForward,
		KeyMute,
		KeyPictsymbols,
		KeySwitchCharset,

		KeyForward,
		KeyExtra1,
		KeyExtra2,
		KeyExtra3,
		KeyExtra4,
		KeyExtra5,
		KeyExtra6,
		KeyFn,

		KeyCircumflex,
		KeySsharp,
		KeyAcute,
		KeyAltGr,
		KeyNumbersign,
		KeyUdiaeresis,
		KeyAdiaeresis,
		KeyOdiaeresis,
		KeySection,
		KeyAring,
		KeyDiaeresis,
		KeyTwosuperior,
		KeyRightParenthesis,
		KeyDollar,
		KeyUgrave,
		KeyAsterisk,
		KeyColon,
		KeyExclam,

		KeyBraceLeft,
		KeyBraceRight,
		KeySysRq,

		KeyboardKeyCount
	};

	enum MouseButton
	{
		MouseButtonLeft,
		MouseButtonMiddle,
		MouseButtonRight,
		MouseButton5,
		MouseButton6,
		MouseButton7,
		MouseButton8,
		MouseButton9,
		MouseButton10,
		MouseButton11,
		MouseButton12,
		MouseButton13,
		MouseButton14,
		MouseButton15,
		MouseButton16,
		MouseButton17,
		MouseButton18,
		MouseButton19,
		MouseButton20,
		MouseButtonWheelUp,
		MouseButtonWheelDown,
		MouseButtonCount,
	};

	enum MouseAxis
	{
		MouseAxisX,
		MouseAxisY,
		MouseAxisScrollX,
		MouseAxisScrollY,
		MouseAxisCount,
	};
}

const size_t Glory::Utils::Reflect::Enum<Glory::KeyboardKey>::m_NumValues = size_t(Glory::KeyboardKey::KeyboardKeyCount);
bool Glory::Utils::Reflect::Enum<Glory::KeyboardKey>::Valid() { return true; }\
const std::string Glory::Utils::Reflect::Enum<Glory::KeyboardKey>::m_EnumStringValues[] = {
	"KeyEscape",
	"KeyF1",
	"KeyF2",
	"KeyF3",
	"KeyF4",
	"KeyF5",
	"KeyF6",
	"KeyF7",
	"KeyF8",
	"KeyF9",
	"KeyF10",
	"KeyF11",
	"KeyF12",
	"KeyF13",
	"KeyF14",
	"KeyF15",
	"KeyF16",
	"KeyF17",
	"KeyF18",
	"KeyF19",
	"KeyPrint",
	"KeyScrollLock",
	"KeyBreak",

	"KeySpace",

	"KeyApostrophe",
	"KeyComma",
	"KeyMinus",
	"KeyPeriod",
	"KeySlash",

	"Key0",
	"Key1",
	"Key2",
	"Key3",
	"Key4",
	"Key5",
	"Key6",
	"Key7",
	"Key8",
	"Key9",

	"KeySemicolon",
	"KeyLess",
	"KeyEqual",

	"KeyA",
	"KeyB",
	"KeyC",
	"KeyD",
	"KeyE",
	"KeyF",
	"KeyG",
	"KeyH",
	"KeyI",
	"KeyJ",
	"KeyK",
	"KeyL",
	"KeyM",
	"KeyN",
	"KeyO",
	"KeyP",
	"KeyQ",
	"KeyR",
	"KeyS",
	"KeyT",
	"KeyU",
	"KeyV",
	"KeyW",
	"KeyX",
	"KeyY",
	"KeyZ",

	"KeyBracketLeft",
	"KeyBackslash",
	"KeyBracketRight",

	"KeyGrave",

	"KeyLeft",
	"KeyRight",
	"KeyUp",
	"KeyDown",
	"KeyInsert",
	"KeyHome",
	"KeyDelete",
	"KeyEnd",
	"KeyPageUp",
	"KeyPageDown",

	"KeyNumLock",
	"KeyKpEqual",
	"KeyKpDivide",
	"KeyKpMultiply",
	"KeyKpSubtract",
	"KeyKpAdd",
	"KeyKpEnter",
	"KeyKpInsert",
	"KeyKpEnd",
	"KeyKpDown",
	"KeyKpPageDown",
	"KeyKpLeft",
	"KeyKpBegin",
	"KeyKpRight",
	"KeyKpHome",
	"KeyKpUp",
	"KeyKpPageUp",
	"KeyKpDelete",

	"KeyBackSpace",
	"KeyTab",
	"KeyReturn",
	"KeyCapsLock",
	"KeyShiftL",
	"KeyCtrlL",
	"KeySuperL",
	"KeyAltL",
	"KeyAltR",
	"KeySuperR",
	"KeyMenu",
	"KeyCtrlR",
	"KeyShiftR",

	"KeyBack",
	"KeySoftLeft",
	"KeySoftRight",
	"KeyCall",
	"KeyEndcall",
	"KeyStar",
	"KeyPound",
	"KeyDpadCenter",
	"KeyVolumeUp",
	"KeyVolumeDown",
	"KeyPower",
	"KeyCamera",
	"KeyClear",
	"KeySymbol",
	"KeyExplorer",
	"KeyEnvelope",
	"KeyEquals",
	"KeyAt",
	"KeyHeadsethook",
	"KeyFocus",
	"KeyPlus",
	"KeyNotification",
	"KeySearch",
	"KeyMediaPlayPause",
	"KeyMediaStop",
	"KeyMediaNext",
	"KeyMediaPrevious",
	"KeyMediaRewind",
	"KeyMediaFastForward",
	"KeyMute",
	"KeyPictsymbols",
	"KeySwitchCharset",

	"KeyForward",
	"KeyExtra1",
	"KeyExtra2",
	"KeyExtra3",
	"KeyExtra4",
	"KeyExtra5",
	"KeyExtra6",
	"KeyFn",

	"KeyCircumflex",
	"KeySsharp",
	"KeyAcute",
	"KeyAltGr",
	"KeyNumbersign",
	"KeyUdiaeresis",
	"KeyAdiaeresis",
	"KeyOdiaeresis",
	"KeySection",
	"KeyAring",
	"KeyDiaeresis",
	"KeyTwosuperior",
	"KeyRightParenthesis",
	"KeyDollar",
	"KeyUgrave",
	"KeyAsterisk",
	"KeyColon",
	"KeyExclam",

	"KeyBraceLeft",
	"KeyBraceRight",
	"KeySysRq",
};

const size_t Glory::Utils::Reflect::Enum<Glory::MouseButton>::m_NumValues = size_t(Glory::MouseButton::MouseButtonCount);
bool Glory::Utils::Reflect::Enum<Glory::MouseButton>::Valid() { return true; }
const std::string Glory::Utils::Reflect::Enum<Glory::MouseButton>::m_EnumStringValues[] = {
	"MouseButtonLeft",
	"MouseButtonMiddle",
	"MouseButtonRight",
	"MouseButtonWheelUp",
	"MouseButtonWheelDown",
	"MouseButton5",
	"MouseButton6",
	"MouseButton7",
	"MouseButton8",
	"MouseButton9",
	"MouseButton10",
	"MouseButton11",
	"MouseButton12",
	"MouseButton13",
	"MouseButton14",
	"MouseButton15",
	"MouseButton16",
	"MouseButton17",
	"MouseButton18",
	"MouseButton19",
	"MouseButton20",
};

const size_t Glory::Utils::Reflect::Enum<Glory::MouseAxis>::m_NumValues = size_t(Glory::MouseAxis::MouseAxisCount);
bool Glory::Utils::Reflect::Enum<Glory::MouseAxis>::Valid() { return true; }
const std::string Glory::Utils::Reflect::Enum<Glory::MouseAxis>::m_EnumStringValues[] = {
	"MouseAxisX",
	"MouseAxisY",
	"MouseAxisScrollX",
	"MouseAxisScrollY",
};